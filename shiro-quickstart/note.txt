Primary Concerns

• Authentication：
    身份认证/登录，验证用户是不是拥有相应的身份；

• Authorization：
    授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户，对某个资源是否具有某个权限；

• Session Management：
    会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通的 JavaSE 环境，也可以是 Web 环境；

• Cryptography：
    加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
    密码模块，Shiro 提供了一些常见的加密组件用于如密码加密/解密。

Supporting Features

• Web Support：
    Web支持，可以非常容易的集成到Web环境；

• Caching：
    缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；

• Concurrency：
    Shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；

• Testing：
    提供测试支持；

• Run As：
    允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；

• Remember Me：
    记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了


• Subject：
    任何可以与应用交互的对象，可以是人，网络爬虫，机器人等
    与 Subject 的所有交互都会委托给 SecurityManager
    Subject 其实是一个门面，SecurityManager 才是实际的执行者
    Shiro 的对外的 API 核心就是 Subject

• SecurityManager：
    安全管理器，所有与安全有关的操作都会与 SecurityManager 交互
    其管理着所有的 Subject；负责进行认证、授权、会话及缓存的管理
    是 Shiro 的核心，它负责与 Shiro 的其他组件进行交互
    相当于 SpringMVC 中的 DispatcherServlet

• Realm：
    SecurityManager 要验证用户身份，需要从 Realm 获取用户的角色、权限进行比较以确定用户身份是否合法，验证用户是否能进行操作
    可以有 1 个或多个 Realm，可以认为是安全实体数据源
    可以是JDBC 实现，也可以是内存实现等等
    由用户提供，所以一般在应用中都需要实现自己的 Realm

• Authenticator：
    负责 Subject 认证，是一个扩展点，可以自定义实现
    可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了

• Authorizer：
    授权器、即访问控制器，用来决定主体是否有权限进行相应的操作
    控制着用户能否访问应用中的哪些功能

• SessionManager：
    管理 Session 生命周期的组件

• CacheManager：
    缓存控制器，来管理如用户、角色、权限等
    因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能
