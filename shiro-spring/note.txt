认证
1. 获取当前的 Subject
2. 判断当前的用户是否已经被认证，即是否已经登录
3. 若没有被认证, 则把用户名和密码封装为 UsernamePasswordToken 对象
4. 执行登录
5. 自定义类，继承 org.apache.shiro.realm.AuthenticatingRealm 类，
    实现 doGetAuthenticationInfo(AuthenticationToken) 方法
    从数据库中获取用户的密码, 返回给 Shiro，由 shiro 完成对密码的比对
    通过 AuthenticatingRealm 的 credentialsMatcher 属性的 doCredentialsMatch 方法来进行的密码的比对


MD5 盐值加密:
1). 在 doGetAuthenticationInfo 方法返回值创建 SimpleAuthenticationInfo 对象的时候,
    需要使用SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName) 构造器
2). 使用 ByteSource.Util.bytes() 来计算盐值
3). 盐值需要唯一，一般使用随机字符串或 user id
4). 使用 new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations); 来计算盐值加密后的密码的值
5). 替换 Realm 的 credentialsMatcher 属性，使用 HashedCredentialsMatcher 对象，并设置加密算法即可


认证策略
AuthenticationStrategy 接口的实现类：
• FirstSuccessfulStrategy
    只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信息，其他的忽略

• AtLeastOneSuccessfulStrategy（默认）
    只要有一个 Realm 验证成功即可，和 FirstSuccessfulStrategy 不同，将返回所有Realm身份验证成功的认证信息

• AllSuccessfulStrategy
    所有 Realm 验证成功才算成功，且返回所有 Realm 身份验证成功的认证信息，如果有一个失败就失败了


授权
1. 继承 AuthorizingRealm 类, 实现 doGetAuthorizationInfo 方法
2. AuthorizingRealm 类继承 AuthenticatingRealm, 但没有实现 AuthenticatingRealm 中的
    doGetAuthenticationInfo, 所以认证和授权只需要继承 AuthorizingRealm 就可以了，同时实现他的两个抽象方法


shiro注解，如果service上有事务，那么service已经是代理了，如果shiro注解加在service层，注入的时候会出现类型转换的异常，要加在controller层