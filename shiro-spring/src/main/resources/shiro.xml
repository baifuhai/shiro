<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Sample RDBMS data source that would exist in any application - not Shiro related.
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="jdbc:hsqldb:mem:shiro-spring"/>
        <property name="username" value="sa"/>
    </bean>-->
    <!-- Populates the sample database with sample users and roles.
    <bean id="bootstrapDataPopulator" class="org.apache.shiro.samples.spring.BootstrapDataPopulator">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->

    <!-- Simulated business-tier "Manager", not Shiro related, just an example
    <bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/>-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!--
        1. 配置 SecurityManager
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--如果没有cacheManager，realm里的doXxx两个方法会被重复调用-->
        <property name="cacheManager" ref="cacheManager"/>

        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--<property name="sessionMode" value="native"/>-->
        <!--<property name="realm" ref="myRealm"/>-->

        <property name="authenticator" ref="authenticator"/>
        <!--realms可以写在authenticator里-->
        <property name="realms">
            <list>
                <ref bean="myRealmMD5"></ref>
                <ref bean="myRealmSHA1"></ref>
            </list>
        </property>

        <!--<property name="sessionManager" ref="sessionManager"/>-->

        <!--<property name="rememberMeManager.cookie.maxAge" value="#{3 * 24 * 3600}"/>-->
        <property name="rememberMeManager.cookie.maxAge" value="5"/>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--
        2. 配置 CacheManager
            需要加入 ehcache 的 jar 包及配置文件
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--<bean id="jdbcRealm" class="org.apache.shiro.samples.spring.realm.SaltAwareJdbcRealm">
        <property name="name" value="jdbcRealm"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="credentialsMatcher">
             The 'bootstrapDataPopulator' Sha256 hashes the password
                 (using the username as the salt) then base64 encodes it:
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA-256"/>
                 true means hex encoded, false means base64 encoded
                <property name="storedCredentialsHexEncoded" value="false"/>
            </bean>
        </property>
    </bean>-->
    <!--
    	3. 配置 Realm
            直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--可以写在securityManager里，会赋值过来-->
        <!--<property name="realms">
            <list>
                <ref bean="myRealmMD5"></ref>
                <ref bean="myRealmSHA1"></ref>
            </list>
        </property>-->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <bean id="myRealmMD5" class="com.test.realm.MyRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
        <!--<property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>

    <bean id="myRealmSHA1" class="com.test.realm.MyRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--
        4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--
        5. 启用 IOC 容器中使用 shiro 的注解，但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks.
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>-->

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--
        6. 配置 ShiroFilter
            必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致
            若不一致，则会抛出: NoSuchBeanDefinitionException
            因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>

        <property name="loginUrl" value="/loginPage"/>
        <property name="successUrl" value="/"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->

        <!--
        	配置哪些页面需要受保护和访问这些页面需要的权限
        	1). anon 可以匿名访问，不需要登录即可访问
        	2). authc 必须认证(即登录)后才能访问
        	3). logout 登出
        	4). roles 角色过滤器
        	url=拦截器[参数]
        	url使用 Ant 风格模式
            通配符支持 ?、* 、 **，注意通配符匹配不包括目录分隔符“/”：
                ?：匹配一个字符，如 /admin? 将匹配 /admin1，但不匹配 /admin 或 /admin/
                *：匹配零个或多个字符串，如 /admin 将匹配 /admin、/admin123，但不匹配 /admin/1
                **：匹配路径中的零个或多个路径，如 /admin/** 将匹配 /admin/a 或 /admin/a/b
            采取第一次匹配优先的方式，从上往下匹配，匹配到即返回，不再向下匹配
        -->
        <!--<property name="filterChainDefinitions">
            <value>
                #/favicon.ico = anon
                #/logo.png = anon
                #/shiro.css = anon
                #/s/login = anon
                # allow WebStart to pull the jars for the swing app:
                #/*.jar = anon
                /loginPage = anon
                /login = anon
                /logout = logout
                /admin = roles[admin]
                /user = roles[user]
                # everything else requires authentication:
                /** = authc
            </value>
        </property>-->
        <!--<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMapFactoryBean"/>
    </bean>

    <!--<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapFactory" factory-method="getBean"/>
    <bean id="filterChainDefinitionMapFactory" class="com.test.config.FilterChainDefinitionMapFactory"/>-->

    <bean id="filterChainDefinitionMapFactoryBean" class="com.test.config.FilterChainDefinitionMapFactoryBean"/>

    <!--sessionDao-->
    <bean id="sessionDao" class="com.test.dao.MySessionDao">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator">
            <bean class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
        </property>
    </bean>

    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionDAO" ref="sessionDao"/>
    </bean>

</beans>